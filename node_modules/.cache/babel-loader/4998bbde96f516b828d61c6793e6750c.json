{"ast":null,"code":"import { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\n\nconst eventPopstate = \"popstate\";\nconst eventPushState = \"pushState\";\nconst eventReplaceState = \"replaceState\";\nexport const events = [eventPopstate, eventPushState, eventReplaceState];\nexport default (({\n  base = \"\"\n} = {}) => {\n  const [path, update] = useState(() => currentPathname(base)); // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n\n  const prevHash = useRef(path + location.search);\n  useEffect(() => {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    const checkForUpdates = () => {\n      const pathname = currentPathname(base),\n            hash = pathname + location.search;\n\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update(pathname);\n      }\n    };\n\n    events.map(e => addEventListener(e, checkForUpdates)); // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n\n    checkForUpdates();\n    return () => events.map(e => removeEventListener(e, checkForUpdates));\n  }, [base]); // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n\n  const navigate = useCallback((to, {\n    replace = false\n  } = {}) => history[replace ? eventReplaceState : eventPushState](null, \"\", // handle nested routers and absolute paths\n  to[0] === \"~\" ? to.slice(1) : base + to), [base]);\n  return [path, navigate];\n}); // While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\n\nif (typeof history !== \"undefined\") {\n  for (const type of [eventPushState, eventReplaceState]) {\n    const original = history[type];\n\n    history[type] = function () {\n      const result = original.apply(this, arguments);\n      const event = new Event(type);\n      event.arguments = arguments;\n      dispatchEvent(event);\n      return result;\n    };\n  }\n}\n\nconst currentPathname = (base, path = location.pathname) => !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || \"/\" : \"~\" + path;","map":{"version":3,"sources":["D:/pizza/node_modules/wouter/use-location.js"],"names":["useEffect","useRef","useState","useCallback","eventPopstate","eventPushState","eventReplaceState","events","base","path","update","currentPathname","prevHash","location","search","checkForUpdates","pathname","hash","current","map","e","addEventListener","removeEventListener","navigate","to","replace","history","slice","type","original","result","apply","arguments","event","Event","dispatchEvent","toLowerCase","indexOf","length"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,WAAtC,QAAyD,iBAAzD;AAEA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,UAAtB;AACA,MAAMC,cAAc,GAAG,WAAvB;AACA,MAAMC,iBAAiB,GAAG,cAA1B;AACA,OAAO,MAAMC,MAAM,GAAG,CAACH,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CAAf;AAEP,gBAAe,CAAC;AAAEE,EAAAA,IAAI,GAAG;AAAT,IAAgB,EAAjB,KAAwB;AACrC,QAAM,CAACC,IAAD,EAAOC,MAAP,IAAiBR,QAAQ,CAAC,MAAMS,eAAe,CAACH,IAAD,CAAtB,CAA/B,CADqC,CACyB;;AAC9D,QAAMI,QAAQ,GAAGX,MAAM,CAACQ,IAAI,GAAGI,QAAQ,CAACC,MAAjB,CAAvB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA,UAAMe,eAAe,GAAG,MAAM;AAC5B,YAAMC,QAAQ,GAAGL,eAAe,CAACH,IAAD,CAAhC;AAAA,YACES,IAAI,GAAGD,QAAQ,GAAGH,QAAQ,CAACC,MAD7B;;AAGA,UAAIF,QAAQ,CAACM,OAAT,KAAqBD,IAAzB,EAA+B;AAC7BL,QAAAA,QAAQ,CAACM,OAAT,GAAmBD,IAAnB;AACAP,QAAAA,MAAM,CAACM,QAAD,CAAN;AACD;AACF,KARD;;AAUAT,IAAAA,MAAM,CAACY,GAAP,CAAYC,CAAD,IAAOC,gBAAgB,CAACD,CAAD,EAAIL,eAAJ,CAAlC,EAfc,CAiBd;AACA;AACA;;AACAA,IAAAA,eAAe;AAEf,WAAO,MAAMR,MAAM,CAACY,GAAP,CAAYC,CAAD,IAAOE,mBAAmB,CAACF,CAAD,EAAIL,eAAJ,CAArC,CAAb;AACD,GAvBQ,EAuBN,CAACP,IAAD,CAvBM,CAAT,CAJqC,CA6BrC;AACA;AACA;AACA;AACA;;AACA,QAAMe,QAAQ,GAAGpB,WAAW,CAC1B,CAACqB,EAAD,EAAK;AAAEC,IAAAA,OAAO,GAAG;AAAZ,MAAsB,EAA3B,KACEC,OAAO,CAACD,OAAO,GAAGnB,iBAAH,GAAuBD,cAA/B,CAAP,CACE,IADF,EAEE,EAFF,EAGE;AACAmB,EAAAA,EAAE,CAAC,CAAD,CAAF,KAAU,GAAV,GAAgBA,EAAE,CAACG,KAAH,CAAS,CAAT,CAAhB,GAA8BnB,IAAI,GAAGgB,EAJvC,CAFwB,EAQ1B,CAAChB,IAAD,CAR0B,CAA5B;AAWA,SAAO,CAACC,IAAD,EAAOc,QAAP,CAAP;AACD,CA9CD,E,CAgDA;AACA;AACA;AACA;AACA;;AACA,IAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClC,OAAK,MAAME,IAAX,IAAmB,CAACvB,cAAD,EAAiBC,iBAAjB,CAAnB,EAAwD;AACtD,UAAMuB,QAAQ,GAAGH,OAAO,CAACE,IAAD,CAAxB;;AAEAF,IAAAA,OAAO,CAACE,IAAD,CAAP,GAAgB,YAAY;AAC1B,YAAME,MAAM,GAAGD,QAAQ,CAACE,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAf;AACA,YAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUN,IAAV,CAAd;AACAK,MAAAA,KAAK,CAACD,SAAN,GAAkBA,SAAlB;AAEAG,MAAAA,aAAa,CAACF,KAAD,CAAb;AACA,aAAOH,MAAP;AACD,KAPD;AAQD;AACF;;AAED,MAAMnB,eAAe,GAAG,CAACH,IAAD,EAAOC,IAAI,GAAGI,QAAQ,CAACG,QAAvB,KACtB,CAACP,IAAI,CAAC2B,WAAL,GAAmBC,OAAnB,CAA2B7B,IAAI,CAAC4B,WAAL,EAA3B,CAAD,GACI3B,IAAI,CAACkB,KAAL,CAAWnB,IAAI,CAAC8B,MAAhB,KAA2B,GAD/B,GAEI,MAAM7B,IAHZ","sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nconst eventPopstate = \"popstate\";\nconst eventPushState = \"pushState\";\nconst eventReplaceState = \"replaceState\";\nexport const events = [eventPopstate, eventPushState, eventReplaceState];\n\nexport default ({ base = \"\" } = {}) => {\n  const [path, update] = useState(() => currentPathname(base)); // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const prevHash = useRef(path + location.search);\n\n  useEffect(() => {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    const checkForUpdates = () => {\n      const pathname = currentPathname(base),\n        hash = pathname + location.search;\n\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update(pathname);\n      }\n    };\n\n    events.map((e) => addEventListener(e, checkForUpdates));\n\n    // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n    checkForUpdates();\n\n    return () => events.map((e) => removeEventListener(e, checkForUpdates));\n  }, [base]);\n\n  // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n  const navigate = useCallback(\n    (to, { replace = false } = {}) =>\n      history[replace ? eventReplaceState : eventPushState](\n        null,\n        \"\",\n        // handle nested routers and absolute paths\n        to[0] === \"~\" ? to.slice(1) : base + to\n      ),\n    [base]\n  );\n\n  return [path, navigate];\n};\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  for (const type of [eventPushState, eventReplaceState]) {\n    const original = history[type];\n\n    history[type] = function () {\n      const result = original.apply(this, arguments);\n      const event = new Event(type);\n      event.arguments = arguments;\n\n      dispatchEvent(event);\n      return result;\n    };\n  }\n}\n\nconst currentPathname = (base, path = location.pathname) =>\n  !path.toLowerCase().indexOf(base.toLowerCase())\n    ? path.slice(base.length) || \"/\"\n    : \"~\" + path;\n"]},"metadata":{},"sourceType":"module"}